[tool.poetry]
name = "community-organisation"
version = "0.1.0"
description = "Directory for generating community docs with Jupyter books."
authors = ["PyCologne <info@jn.contact>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
mypy = "1.10.0"
poethepoet = "0.26.1"
pre-commit = "3.7.1"
ruff = "0.4.4"
typing-extensions = "4.11.0"


[tool.poe.tasks]
_lock = "poetry lock"
_install = "poetry install --sync"
install.sequence = ["_lock", "_install"]
install.help = "Update lock file and install dependencies"
check.sequence = [
    { cmd = "poetry run ruff check --fix ." },
    { cmd = "poetry run ruff format ." }
]
check.ignore_fail = true
check.help = "Run linter and formatter for fixing code in local development"
check-all.cmd = "pre-commit run --all"
check-all.help = "Run all checks and fixes defined as pre-commit hooks"
_lint-report.cmd = "poetry run ruff check --output-file reports/ruff-report.json --output-format json --exit-zero ."
_lint-github.cmd = "poetry run ruff check --output-format github ."
lint-ci.sequence = ["_lint-report", "_lint-github"]
lint-ci.help = "Run linter and generate reports for github CI"
format-ci.cmd = "poetry run ruff format --check --diff ."
format-ci.help = "Run formatter and check for changes for github CI"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
